<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * The REFINERYCMS object is the single global object used by RefineryCMS.</span>
<span class="cm"> * </span>
<span class="cm"> * @version    $Id$</span>
<span class="cm"> * @package    refinerycms-js</span>
<span class="cm"> * @copyright  Copyright (C) 2011</span>
<span class="cm"> * @author     keraM marek@keram.name http//keram.name</span>
<span class="cm"> * @license    MIT</span>
<span class="cm"> */</span>

<span class="cm">/**</span>
<span class="cm"> * The REFINERYCMS global namespace object.</span>
<span class="cm"> * </span>
<span class="cm"> * @title      REFINERYCMS Global object</span>
<span class="cm"> * @class      REFINERYCMS</span>
<span class="cm"> * @module     refinerycms</span>
<span class="cm"> * @required   jquery-1.5.2</span>
<span class="cm"> * @namespace  </span>
<span class="cm"> * @static</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">REFINERYCMS</span> <span class="o">=</span> <span class="nx">REFINERYCMS</span> <span class="o">||</span> <span class="p">{};</span>

<span class="nx">REFINERYCMS</span> <span class="o">=</span> <span class="p">{</span>
	
    <span class="cm">/**</span>
<span class="cm">	 * I love YUI namespaces</span>
<span class="cm">	 * </span>
<span class="cm">	 * @see YUI.namespace</span>
<span class="cm">     * @method namespace</span>
<span class="cm">     * @param  {string*} arguments 1-n namespaces to create.</span>
<span class="cm">     * @return {object}  A reference to the last namespace object created.</span>
<span class="cm">     */</span>
    <span class="nx">namespace</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">arguments</span><span class="p">,</span> <span class="nx">o</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">d</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
			<span class="nx">o</span><span class="o">=</span><span class="nb">window</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">o</span><span class="p">[</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">||</span> <span class="p">{};</span>
				<span class="nx">o</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]];</span>
			<span class="p">}</span>
		<span class="p">}</span>
		
		<span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
    <span class="p">},</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Extend Child object with Parent prototype</span>
<span class="cm">	 * </span>
<span class="cm">	 * @param {object} Child</span>
<span class="cm">	 * @param {object} Parent</span>
<span class="cm">	 */</span>
    <span class="kr">extends</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Child</span><span class="p">,</span> <span class="nx">Parent</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">function</span> <span class="nx">Q</span><span class="p">()</span> <span class="p">{};</span>
		
		<span class="nx">Q</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>

		<span class="kd">var</span> <span class="nx">R</span> <span class="o">=</span> <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
		<span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Q</span><span class="p">;</span>
		
		<span class="c1">// adding back overriden methods and properties</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">R</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">R</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
		<span class="p">}</span>

		<span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Child</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
